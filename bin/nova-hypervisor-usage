#!/usr/bin/env python
# -*- coding: utf-8 -*-#
#
#
# Copyright (C) 2015, S3IT, University of Zurich. All rights reserved.
#
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
"""
Get the current load on the hypervisors, print how many VMs for each flavor can be started.
Also takes into account host aggregates and cpu_allocation_ratio for each host aggregate.
"""
__docformat__ = 'reStructuredText'
__author__ = 'Antonio Messina <antonio.s.messina@gmail.com>'

import argparse
import json
import logging
import os
import prettytable
import sys
from collections import OrderedDict

from keystoneclient.auth.identity import v3
from keystoneclient import session
from keystoneclient.v3 import client as keystone_client
try:
    # old package name
    from keystoneclient.openstack.common.apiclient.exceptions import NotFound
except ImportError:
    from keystoneclient.exceptions import NotFound

from novaclient import client as nova_client

log = logging.getLogger()
log.addHandler(logging.StreamHandler())

def mib_to_str(value):
    if abs(value) > 2**20:
        return "%.2f TB" % (value/2**20)
    elif abs(value) > 2**10:
        return "%.2f GB" % (value/2**10)
    else:
        return "%.2f MB" % value

def memoize(f):
    memo = {}
    def helper(x):
        if f not in memo:
            memo[f] = f(x)
        return memo[f]
    return helper

@memoize
def make_session(opts):
    auth = v3.Password(auth_url=opts.os_auth_url,
                       user_id=opts.os_username,
                       password=opts.os_password,
                       project_name=opts.os_project_name,
                       project_domain_name='default')
    sess = session.Session(auth=auth)
    return sess

class ProxyFlavor(object):
    def __init__(self, cls):
        object.__setattr__(self, "_obj", cls)
    def __getattribute__(self, name):
        if name == 'get_keys':
            obj = object.__getattribute__(self, "_obj")
            def return_cached_key():
                try:
                    return obj.cached_get_keys
                except AttributeError:
                    obj.cached_get_keys = obj.get_keys()
                    return obj.cached_get_keys
            return return_cached_key

        return getattr(object.__getattribute__(self, "_obj"), name)
    def __delattr__(self, name):
        delattr(object.__getattribute__(self, "_obj"), name)
    def __setattr__(self, name, value):
        setattr(object.__getattribute__(self, "_obj"), name, value)

    def __nonzero__(self):
        return bool(object.__getattribute__(self, "_obj"))
    def __str__(self):
        return str(object.__getattribute__(self, "_obj"))
    def __repr__(self):
        return repr(object.__getattribute__(self, "_obj"))

class EnvDefault(argparse.Action):
    # This is took from
    # http://stackoverflow.com/questions/10551117/setting-options-from-environment-variables-when-using-argparse
    def __init__(self, envvar, required=True, default=None, **kwargs):
        if not default and envvar:
            if envvar in os.environ:
                default = os.environ[envvar]
        if required and default:
            required = False
        super(EnvDefault, self).__init__(default=default, required=required,
                                         **kwargs)

    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, values)

def setup():
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--os-username',
                        action=EnvDefault,
                        envvar="OS_USERNAME",
                        help='OpenStack administrator username. If not supplied, the value of the '
                        '"OS_USERNAME" environment variable is used.')
    parser.add_argument('--os-password',
                        action=EnvDefault,
                        envvar="OS_PASSWORD",
                        help='OpenStack administrator password. If not supplied, the value of the '
                        '"OS_PASSWORD" environment variable is used.')
    parser.add_argument('--os-project-name',
                        action=EnvDefault,
                        envvar="OS_PROJECT_NAME",
                        help='OpenStack administrator project name. If not supplied, the value of the '
                        '"OS_PROJECT_NAME" environment variable is used.')
    parser.add_argument('--os-auth-url',
                        action=EnvDefault,
                        envvar="OS_AUTH_URL",
                        help='OpenStack auth url endpoint. If not supplied, the value of the '
                        '"OS_AUTH_URL" environment variable is used.')
    parser.add_argument('--json', action='store_true')
    parser.add_argument('-l', '--long', action='store_true')
    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help='Increase verbosity')

    opts = parser.parse_args()

    # Set verbosity
    verbosity = max(0, 3-opts.verbose) * 10
    log.setLevel(verbosity)

    return opts

class NotMatching(Exception): pass

def filter_by_spec(flavor, hypervisors):
    valid_hypervisors = []
    for node in hypervisors:
        try:
            for key, val in flavor.get_keys().items():
                if not any([ag.metadata.get(key) == val for ag in node.aggregates]):
                    raise NotMatching()
            valid_hypervisors.append(node)
        except NotMatching:
            pass
    return valid_hypervisors


def compute_capability(flavor, hypervisors):
    hypervisors = filter_by_spec(flavor, hypervisors)
    count = 0
    max_count = 0

    for node in hypervisors:
        vms_by_cpus = int((node.vcpus_max - node.vcpus_used) / flavor.vcpus)
        vms_by_mem = node.memory_mb_free / flavor.ram
        n_vms = min(
            vms_by_cpus,
            vms_by_mem)
        if n_vms < 0: n_vms = 0

        max_vms_by_cpus = int((node.vcpus_max) / flavor.vcpus)
        max_vms_by_mem = node.memory_mb / flavor.ram
        n_maxvms = min(
            max_vms_by_cpus,
            max_vms_by_mem)
        count += n_vms
        max_count += n_maxvms
    return max_count, count

def main(opts):
    sess = make_session(opts)
    #keystone = keystone_client.Client(session=sess)
    nova = nova_client.Client('2', session=sess)

    #stats = nova.hypervisors_stats.statistics()
    aggregates = nova.aggregates.list()
    hypervisors = nova.hypervisors.list()

    for hyp in hypervisors:
        # Set the proper allocation ratio, depending on the aggregate
        hyp.cpu_allocation_ratio = 1.0
        hyp.aggregates = []
        for ag in aggregates:
            if hyp.hypervisor_hostname in ag.hosts:
                hyp.aggregates.append(ag)
                if 'cpu_allocation_ratio' in ag.metadata:
                    ratio = float(ag.metadata['cpu_allocation_ratio'])
                    hyp.cpu_allocation_ratio = max(hyp.cpu_allocation_ratio, ratio)
        # Update free cpus and ram
        hyp.vcpus_max = hyp.vcpus * hyp.cpu_allocation_ratio
        hyp.vcpus_free = hyp.vcpus_max - hyp.vcpus_used
        hyp.memory_mb_free = hyp.memory_mb - hyp.memory_mb_used

    all_vms = nova.servers.list(search_opts={'all_tenants': 'True'})
    log.info("%d vms currently running" % len(all_vms))

    data = {'summary': {}, 'hypervisors': [], 'flavors': []}
    if opts.long:
        detail = data['hypervisors']
        for hyp in hypervisors:
            detail.append(
                {'hostname': hyp.hypervisor_hostname,
                'state': "%s/%s" % (hyp.state, hyp.status),
                'cores': hyp.vcpus,
                'vcpus': hyp.vcpus_max,
                'VMs': len([vm for vm in all_vms if getattr(vm, 'OS-EXT-SRV-ATTR:hypervisor_hostname') == hyp.hypervisor_hostname]),
                'vcpus_used': hyp.vcpus_used,
                'vcpus_free': hyp.vcpus_free,
                'mem': hyp.memory_mb,
                'mem_used': hyp.memory_mb_used,
                'mem_free': hyp.memory_mb_free,
                })


    # Collect data on the general availability of vcpus and memory
    enabled_hypervisors = filter(lambda x: x.status == 'enabled', hypervisors)

    avail_cpus = sum(h.vcpus for h in enabled_hypervisors)
    used_cpus = sum(h.vcpus_used for h in hypervisors)
    data['summary'] = OrderedDict([
        ('hypervisors', len(hypervisors)),
        ('hypervisors enabled', len(enabled_hypervisors)),
        ('vcpus', sum(h.vcpus for h in hypervisors)),
        ('available vcpus', avail_cpus),
        ('vcpus free', sum(h.vcpus_free for h in enabled_hypervisors)),
        ('vcpus used', used_cpus),
        ('vcpus usage %', '%.2f %%' % (float(used_cpus)/avail_cpus*100)),
        ('vms', len(all_vms)),
    ])

    # For each flavor, check how many can be ran
    if len(enabled_hypervisors) != hypervisors:
        log.warning("Ignoring %d disabled hypervisors" % (len(hypervisors) - len(enabled_hypervisors)))
    for flavor in nova.flavors.list():
        flavor = ProxyFlavor(flavor)
        log.debug("Computing capability for flavor %s" % flavor.name)
        maxf, availf = compute_capability(flavor, enabled_hypervisors)
        data['flavors'].append(
            {'name': flavor.name,
             'visibility': 'public' if flavor.is_public else 'private',
             'current': len([vm for vm in all_vms if vm.flavor['id'] == flavor.id]),
             'max': maxf,
             'avail': availf})
    return data

def print_table(data):
    # Print deailed hypervisor information
    if data['hypervisors']:
        pt = prettytable.PrettyTable(('Hostname', 'state', 'cores', 'vcpus', 'VMs', 'vcpus_used', 'vcpus_free', 'mem', 'mem_used', 'mem_free'))
        for field in pt.field_names:
            pt.align[field] = 'r'
        pt.align['Hostname'] = 'l'

        for hyp in data['hypervisors']:
            pt.add_row([
                hyp['hostname'],
                hyp['state'],
                hyp['cores'],
                hyp['vcpus'],
                hyp['VMs'],
                hyp['vcpus_used'],
                hyp['vcpus_free'],
                mib_to_str(hyp['mem']),
                mib_to_str(hyp['mem_used']),
                mib_to_str(hyp['mem_free']),
                ])
        print(pt.get_string(sortby='Hostname'))

    # Print summary
    pt = prettytable.PrettyTable(('property','value'))
    pt.align['property'] = 'l'
    pt.align['value'] = 'r'
    for key,value in data['summary'].items():
        pt.add_row([key, value])
    print(pt)

    # Print detailed flavor information
    pt = prettytable.PrettyTable(('flavor', 'visibility', 'current', 'max', 'avail'))
    for field in pt.field_names:
        pt.align[field] = 'r'
    pt.align['flavor'] = 'l'
    pt.align['visibility'] = 'l'
    for flavor in data['flavors']:
        pt.add_row([flavor['name'],
                    flavor['visibility'],
                    flavor['current'],
                    flavor['max'],
                    flavor['avail']])
    print(pt.get_string(sortby='max', reversesort=True))

if __name__ == "__main__":
    opts = setup()
    data = main(opts)
    if opts.json:
        print(json.dumps(data))
    else:
        print_table(data)
